"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[497],{3671:(e,t)=>{t.A=(e,t)=>{const o=e.__vccOpts||e;for(const[e,n]of t)o[e]=n;return o}},4992:(e,t,o)=>{o.r(t),o.d(t,{comp:()=>s,data:()=>p});var n=o(7847);const i={href:"http://ksria.com/simpread/",target:"_blank",rel:"noopener noreferrer"},r={href:"https://tueo.github.io/2020/05/31/zigbee-routing/",target:"_blank",rel:"noopener noreferrer"},a=(0,n.Fv)('<blockquote><p>• Table Routing• Broadcast Routing• Multicast Routing• Many-to-One/Source Routing</p></blockquote><p>• Table Routing<br> • Broadcast Routing<br> • Multicast Routing<br> • Many-to-One/Source Routing</p><h2 id="_1-1-table-routing" tabindex="-1"><a class="header-anchor" href="#_1-1-table-routing"><span><a href="#1-1-Table-Routing" title="1.1. Table Routing"></a>1.1. Table Routing</span></a></h2><p>网络中的节点通过 route discover 来建立到达其他节点的路径，如果路径已经建立了，之后发送消息就遵循下面的步骤：</p><ol><li>消息的发送方在自己的路由表中找到发往接收方的下一跳的节点的地址，然后把消息发给这个节点。</li><li>在发送方和接收方之间的节点在自己的路由表中找到通往接收方节点的下一跳节点的地址，向接力一样最终发往消息的接收方。</li><li>如果中间路由失败了，那么会产生一个错误，送到消息的发送方，消息的发送方就可以重新发起 route discover 过程来重新建立路由。</li></ol><h3 id="_1-1-1-route-discovery-路由发现" tabindex="-1"><a class="header-anchor" href="#_1-1-1-route-discovery-路由发现"><span><a href="#1-1-1-Route-Discovery-%E8%B7%AF%E7%94%B1%E5%8F%91%E7%8E%B0" title="1.1.1. Route Discovery 路由发现"></a>1.1.1. Route Discovery 路由发现</span></a></h3><p>当一个节点希望发送数据包到另外一个节点时，它先检查自己的 route table 中是否包含目的节点的 route。</p><ul><li>如果包含，直接将数据发送给下一跳节点</li><li>如果不包含，它发起一个 <strong>route discovery</strong> 过程。<br> route discovery 的启动标志是源节点广播 <strong>Route Request(RREQ)</strong> 数据包。</li></ul><p>RREQ 数据包包含几个组成部分：</p><ol><li>Route Request ID(AODV: sequence number)</li><li>目标网络地址</li><li>路径损耗</li><li>源地址</li></ol><p>目的节点接收到 RREQ 消息后单播一个 <strong>Route Reply</strong> 消息到源地址。之后源节点向目的节点发送消息就可以通过这个已经建立的 route 来进行，中转节点在 discovery 期间也会建立到达目的节点的 route。</p><h3 id="_1-1-2-route-maintenance-路由维护" tabindex="-1"><a class="header-anchor" href="#_1-1-2-route-maintenance-路由维护"><span><a href="#1-1-2-Route-maintenance-%E8%B7%AF%E7%94%B1%E7%BB%B4%E6%8A%A4" title="1.1.2. Route maintenance 路由维护"></a>1.1.2. Route maintenance 路由维护</span></a></h3><p>节点为具有 <strong>outgoing link</strong> 的邻居保存一个错误计数器，计数器溢出了则判定 <strong>Link Failure</strong>。</p><p>要注意到 MTO 路由错误与普通的表路由错误在处理上的不同，MTO 路由中是可以假定你的邻居拥有回到中心节点的路径的，错误通知可以通过邻居发给中心节点，中心节点受到消息后在网络层之上做处理。</p><h2 id="_1-2-many-to-one-多对一路由" tabindex="-1"><a class="header-anchor" href="#_1-2-many-to-one-多对一路由"><span><a href="#1-2-Many-to-one-%E5%A4%9A%E5%AF%B9%E4%B8%80%E8%B7%AF%E7%94%B1" title="1.2. Many-to-one 多对一路由"></a>1.2. Many-to-one 多对一路由</span></a></h2><p>MTO 路由是一种使网络中的其他路由设备拥有回到中心节点路径的路由机制。在实际的网络应用中，比较常见到这种情况，即大多数节点需要与一个单一节点进行通讯。这个单一节点一般称之为 collector 或者 concentrator。<br> 这种机制通过中心节点发送 many-to-one 广播消息在网络中的其他路由节点上建立反向路由。当路由节点接受到 many-to-one 路由请求后，它将回到中心节点的下一跳的信息存储在自己的路由表中。在路由表中有一个字段 Many-to-one，表示该条目的目的地址为中心节点。</p><figure><img src="https://tueo.github.io/images/many_to_one_routing_275x285.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>建立 many-to-one 路由的流程：</p><ol><li>中心节点广播 many-to-one 路由请求消息。</li><li>网络中的其他路由节点接收到请求后在路由表里存储一个反向的 many-to-one 路由表条目。</li><li>zigbee 协议栈会根据每个邻居的链路质量选择一个最好的节点作为回到的中心节点的下一跳地址。</li><li>many-to-one 路由请求应该周期性的广播，以刷新网络中的反向路由。</li></ol><h2 id="_1-3-source-routing-源路由" tabindex="-1"><a class="header-anchor" href="#_1-3-source-routing-源路由"><span><a href="#1-3-Source-Routing-%E6%BA%90%E8%B7%AF%E7%94%B1" title="1.3. Source Routing 源路由"></a>1.3. Source Routing 源路由</span></a></h2><p>Source Routing 可以让中心节点存储到网络中其他节点的完整路由。当中心节点拥有到达某个节点的完整路由时，之后可以为发往该节点的消息指定完整的路径。</p><figure><img src="https://tueo.github.io/images/source_routing.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>建立 Source Routing 的流程：</p><ol><li>中心节点周期性的发送 many-to-one 路由请求，网络中的其他设备拥有了回到中心节点的路径。</li><li>当网络中的设备使用 many-to-one 路由向中心节点发送消息之前，它先发送一条路由记录 (Route Record) 消息到中心节点。</li><li>路由记录消息沿着 many-to-one 路由单播到达中心节点。</li><li>当路由记录经过 many-to-one 路由上的每个节点时，都会将这个节点的网络地址附加到路由记录消息中。</li><li>当路由记录消息到达中心节点时，它就包含了这一路上的每一跳节点的网络地址。</li><li>中心节点将这条路由反向存储在自己的路由记录表 (Route Record Table) 中。</li></ol><h3 id="_1-3-3-high-low-ram-concentrator-mode" tabindex="-1"><a class="header-anchor" href="#_1-3-3-high-low-ram-concentrator-mode"><span><a href="#1-3-3-High-Low-RAM-Concentrator-mode" title="1.3.3. High/Low RAM Concentrator mode"></a>1.3.3. High/Low RAM Concentrator mode</span></a></h3><ol><li>High RAM 模式表示中心节点具备存储网络中所有节点的路径的能力；网络中的节点只需要在收到 MTO 路由请求后发送第一条消息之前发送路由记录到中心节点。（NXP 有提到是当节点受到来自中心节点通过 RRT 发送过来的数据才停止这一行为）</li><li>Low RAM 模式表示中心节点缺少 RAM 来存储所有的节点路径；网络中的路由节点在每次发送消息时都需要先发送路由记录。</li></ol><p>TODO：网络中的设备是如何确认中心节点的 RAM 类型呢？</p><blockquote><p>When Many to One (MTO) requests are broadcast, DO = 40 (bit 6) determines if the concentrator is operating in high or low RAM mode.</p></blockquote><h2 id="_1-4-参考资料" tabindex="-1"><a class="header-anchor" href="#_1-4-参考资料"><span><a href="#1-4-%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99" title="1.4. 参考资料"></a>1.4. 参考资料</span></a></h2>',29),l={href:"https://www.digi.com/resources/documentation/Digidocs/90001942-13/concepts/c_source_routing.htm#_bookmark179",target:"_blank",rel:"noopener noreferrer"},u=(0,n.Lk)("br",null,null,-1),c={href:"https://www.silabs.com/community/wireless/zigbee-and-thread/knowledge-base.entry.html/2017/12/18/_many-to-one_source-JRvm",target:"_blank",rel:"noopener noreferrer"},g={},s=(0,o(3671).A)(g,[["render",function(e,t){const o=(0,n.g2)("ExternalLinkIcon");return(0,n.uX)(),(0,n.CE)("div",null,[(0,n.Lk)("blockquote",null,[(0,n.Lk)("p",null,[(0,n.eW)("本文由 "),(0,n.Lk)("a",i,[(0,n.eW)("简悦 SimpRead"),(0,n.bF)(o)]),(0,n.eW)(" 转码， 原文地址 "),(0,n.Lk)("a",r,[(0,n.eW)("tueo.github.io"),(0,n.bF)(o)])])]),a,(0,n.Lk)("p",null,[(0,n.Lk)("a",l,[(0,n.eW)("Source routing"),(0,n.bF)(o)]),u,(0,n.Lk)("a",c,[(0,n.eW)("浅谈 Many-to-One/Source Routing 机制"),(0,n.bF)(o)])])])}]]),p=JSON.parse('{"path":"/protocol/zigbee-routing.html","title":"","lang":"zh-CN","frontmatter":{"description":" 本文由 简悦 SimpRead 转码， 原文地址 tueo.github.io • Table Routing• Broadcast Routing• Multicast Routing• Many-to-One/Source Routing • Table Routing • Broadcast Routing • Multicast Routin...","head":[["meta",{"property":"og:url","content":"https://newzone.top/protocol/zigbee-routing.html"}],["meta",{"property":"og:site_name","content":"三月的油菜花"}],["meta",{"property":"og:description","content":" 本文由 简悦 SimpRead 转码， 原文地址 tueo.github.io • Table Routing• Broadcast Routing• Multicast Routing• Many-to-One/Source Routing • Table Routing • Broadcast Routing • Multicast Routin..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tueo.github.io/images/many_to_one_routing_275x285.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-23T13:17:16.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"property":"article:author","content":"LearnData"}],["meta",{"property":"article:modified_time","content":"2024-03-23T13:17:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"\\",\\"image\\":[\\"https://tueo.github.io/images/many_to_one_routing_275x285.png\\",\\"https://tueo.github.io/images/source_routing.gif\\"],\\"dateModified\\":\\"2024-03-23T13:17:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"LearnData\\",\\"url\\":\\"https://newzone.top\\"}]}"]]},"headers":[{"level":2,"title":"1.1. Table Routing","slug":"_1-1-table-routing","link":"#_1-1-table-routing","children":[{"level":3,"title":"1.1.1. Route Discovery 路由发现","slug":"_1-1-1-route-discovery-路由发现","link":"#_1-1-1-route-discovery-路由发现","children":[]},{"level":3,"title":"1.1.2. Route maintenance 路由维护","slug":"_1-1-2-route-maintenance-路由维护","link":"#_1-1-2-route-maintenance-路由维护","children":[]}]},{"level":2,"title":"1.2. Many-to-one 多对一路由","slug":"_1-2-many-to-one-多对一路由","link":"#_1-2-many-to-one-多对一路由","children":[]},{"level":2,"title":"1.3. Source Routing 源路由","slug":"_1-3-source-routing-源路由","link":"#_1-3-source-routing-源路由","children":[{"level":3,"title":"1.3.3. High/Low RAM Concentrator mode","slug":"_1-3-3-high-low-ram-concentrator-mode","link":"#_1-3-3-high-low-ram-concentrator-mode","children":[]}]},{"level":2,"title":"1.4. 参考资料","slug":"_1-4-参考资料","link":"#_1-4-参考资料","children":[]}],"git":{"createdTime":1711199836000,"updatedTime":1711199836000,"contributors":[{"name":"Tueo","email":"tuweidongg@gmail.com","commits":1}]},"readingTime":{"minutes":5,"words":1501},"filePathRelative":"protocol/zigbee-routing.md","localizedDate":"2024年3月23日","excerpt":"<blockquote>\\n<p>本文由 <a href=\\"http://ksria.com/simpread/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">简悦 SimpRead</a> 转码， 原文地址 <a href=\\"https://tueo.github.io/2020/05/31/zigbee-routing/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">tueo.github.io</a></p>\\n</blockquote>\\n<blockquote>\\n<p>• Table Routing• Broadcast Routing• Multicast Routing• Many-to-One/Source Routing</p>\\n</blockquote>","autoDesc":true}')}}]);