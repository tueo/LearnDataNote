"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[5750],{3671:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,e]of a)s[n]=e;return s}},5966:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>o,data:()=>c});var e=s(7847);const t=[(0,e.Fv)('<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><p>断断续续在分析一个死机问题，该问题很容易复现，但是每次复现后的死机现场都不太一样，从内存看，存在踩内存的情况。 <img src="https://raw.githubusercontent.com/tueo/cloudimg/main/img/20240613151517.png" alt="" loading="lazy"></p><p>问题发生在展锐的8910平台，该平台提供了一些内存问题检测功能。</p><p><code>Heap report</code>: 在死机发生后，可以通过 Heap report 查看heap中的内存分配情况，包括内存的申请者，内存块的大小，以及检查内存是否存在被踩的情况等功能。 <img src="https://raw.githubusercontent.com/tueo/cloudimg/main/img/20240613150930.png" alt="" loading="lazy"></p><p><code>Memory Record</code>: memory record会保存内存的申请释放记录。在调试时，可以在构建版本时手动将<code>Memory Record</code>的记录空间增大，便于分析问题。 <img src="https://raw.githubusercontent.com/tueo/cloudimg/main/img/20240613151157.png" alt="" loading="lazy"></p><h2 id="进入现场" tabindex="-1"><a class="header-anchor" href="#进入现场"><span>进入现场</span></a></h2><p>死机后，将DUMP文件通过Dtools工具导出了<code>Heap report</code>和<code>Memory Record</code>文件，放在一旁备用，Dtools工具是展锐平台独有的调试工具。</p><p>然后通过GDB还原死机前的栈情况如下： <img src="https://raw.githubusercontent.com/tueo/cloudimg/main/img/20240613151923.png" alt="" loading="lazy"> 这里看到是free接口中出现的死机，明显是内存问题，从prvBlockCheckTailPattern可以推测到，待释放的内存块的尾部出现了踩踏情况，然后系统检测到后触发panic。这里的内存块是<strong>0x80da8a68</strong>.</p><p>接下来开始分析0x80da8a68内存块被踩的情况。</p><h2 id="_0x80da8a68内存块分析" tabindex="-1"><a class="header-anchor" href="#_0x80da8a68内存块分析"><span>0x80da8a68内存块分析</span></a></h2><p><img src="https://raw.githubusercontent.com/tueo/cloudimg/main/img/20240613153007.png" alt="" loading="lazy"> 观察下<code>Heap report</code>,看到有3块内存都被破坏了。其中看到第一个就是<strong>0x80da8a68</strong>。</p><p>0x80da8a68内存块对应的用户侧指针为<strong>0x80da8a70</strong>，这里是偏移了8个字节的内存块首部。从内存块首部信息可以看到这个内存块的总大小是96个字节。</p><p>这个平台的内存块大致可以分为3个部分：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>内存块首部 --- 用户数据区 --- 内存块尾部\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>先整体看下这个内存块的内容。首先确定内存块首部没有遭到破坏，如果首部遭到破坏，应该会像上面第三个被破坏的内存块一样无法获取到申请者以及内存块size信息。</p><p>那继续看下用户数据部分，</p><p>通过<code>Heap report</code>的信息排查到该内存块的使用方是pbk_init_callback函数，从代码中找到用户指针的类型 pbk_entry_t ，在trace32中解析该内存地址。 <img src="https://raw.githubusercontent.com/tueo/cloudimg/main/img/20240613154847.png" alt="" loading="lazy"> 从用户内存信息上看， 用户侧的内存似乎没有被破坏，其实这里并不太确定，因为pFullName的内容明显不属于这个内存块的内容，而是测试其间发送的一个特定指令携带的数据。但是通过对比正常的pbk_entry_t和这个被踩的内容，比较怀疑这里的pFullName是拷贝的一块垃圾数据，这一点可以通过后面的fullNameSize为0来大致推敲。</p><blockquote><p>这里其实被这个垃圾数据迷惑了好久，但是最终还是认为这块数据没有问题的概率更大，因此继续往后摸排了。</p></blockquote><p>既然首部和用户数据区都没有被破坏，那么接下来看下内存块尾部。 <img src="https://raw.githubusercontent.com/tueo/cloudimg/main/img/20240613155624.png" alt="" loading="lazy"></p><p>到内存块的尾部部分，观察到最后一个字节的值是0x80，不是正常的内存块标记，继续往前看，感觉从内存块最后一个字节到前面的8个字节都不正常。因为在之前的若干次无效分析中，依稀看到过601E1400和80080010这两个数据。</p><p>那么被踩的地址就是80DA8AC0到80DA8AC7么？ 其实这里只能感觉大概是，首先是80DA8AC7后面的80DA8AC8是另一个内存块的首部，该处内存没有被破坏。其次是踩踏的起始地址是80DA8AC0么，这里真的很难说，因为前面都是0，并且pbk_entry_t的尾部数据可能就是0。</p><p>其实到这里，仅发现了踩踏方的数据特征是601E1400和80080010。继续看<code>Heap report</code>中下一个内存踩踏。</p><h2 id="_0x80ea7ff8" tabindex="-1"><a class="header-anchor" href="#_0x80ea7ff8"><span>0x80ea7ff8</span></a></h2><p>被踩的内存块是0x80ea7ff8，内存块的总大小是24个字节，对应的用户侧指针为0x80ea8000, 通过Heap report找到申请内存的位置，确定了这个内存用于保存字符串buffer。</p><figure><img src="https://raw.githubusercontent.com/tueo/cloudimg/main/img/20240613161616.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里通过trace32直接观察该内存块的内容，发现该内存块的用户数据区明显存在异常，0x80ea8000开始的问位置应该保存着字符串，但是这里却出现了601E1400，以及后面的内存块尾部出现了80080010，很明显，从0x80ea8000到内存块尾部都被破坏了。并且没有踩到后面一个内存块。</p><p>截至目前， 拿到了两个信息：</p><ol><li>加害者的数据特征：601E1400, 80080010 以及 8008000C。</li><li>已知的一个被踩踏的起始地址为0x80ea8000。</li></ol><h2 id="确定问题" tabindex="-1"><a class="header-anchor" href="#确定问题"><span>确定问题</span></a></h2><p>从上面两个信息，其实无法直接分析到问题点。但是这个问题分析了很久，也比较容易复现，所以在代码中增加了许多信息的打印，这次直接将0x80ea8000在log中搜索，直接搜索到了0x80ea8000。 <img src="https://raw.githubusercontent.com/tueo/cloudimg/main/img/20240613163211.png" alt="" loading="lazy"></p><p>这里观察0x80ea8000上面一行log的地址0x80ea7c00，发现他们俩相差了1024个字节，明显存在问题。</p><blockquote><p>其实在之前的多次分析中已经逐渐靠近了问题点，也在问题点处增加了log，但是都是擦肩而过了。</p></blockquote><h2 id="问题原因-指针-1问题" tabindex="-1"><a class="header-anchor" href="#问题原因-指针-1问题"><span>问题原因（指针+1问题）</span></a></h2><p>这里说明下问题的原因</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">example</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name">uint32_t</span> a<span class="token punctuation">;</span>\n    <span class="token class-name">uint32_t</span> b<span class="token punctuation">;</span>\n    <span class="token keyword">void</span> <span class="token operator">*</span> p_ptr<span class="token punctuation">;</span>\n    <span class="token class-name">uint32_t</span> p_len<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要的是这样一块数据结构：动态申请一个内存块，内存块的前半部分是example结构体，接着在结构体的尾部是一块buffer，用来保存不定长的参数，p_ptr指向这个buffer，p_len表示这个buffer的szie。</p><p>下面是问题点的示例代码：</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token class-name">uint32_t</span> p_len <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>\n\n<span class="token keyword">struct</span> <span class="token class-name">example</span> <span class="token operator">*</span> p_example <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">example</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">ALIGN</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">example</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> p_len<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\np_example<span class="token operator">-&gt;</span>p_ptr <span class="token operator">=</span> p_example <span class="token operator">+</span> <span class="token function">ALIGN</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">example</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题发生在p_example-&gt;p_ptr的赋值上，在计算buffer的地址时，直接对结构体指针做了加法运算。导致实际的p_example-&gt;p_ptr是 <code>ALIGN(sizeof(struct example)) * sizeof(struct example)</code>，指向了错误的内存地址，成为了<strong>野指针</strong>。</p><p>知识点复习：</p><p>在C语言中，指针地址的算术操作与指针所指向的数据类型密切相关。当你对指针进行加法操作时，实际上是根据指针所指向的数据类型的大小来调整地址。</p><p>指针地址加1 假设你有一个指向某种类型的指针ptr，当你执行ptr + 1时，指针的值会增加一个该类型的大小（以字节为单位）。这意味着指针会移动到下一个元素的位置。</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> arr<span class="token punctuation">;</span>  <span class="token comment">// 指向数组的第一个元素</span>\n\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Address of arr[0]: %p\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Value of arr[0]: %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    ptr <span class="token operator">=</span> ptr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 指针地址加1后，实际指向了arr[1]的位置，地址值+4。</span>\n\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Address of arr[1]: %p\\n&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Value of arr[1]: %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>确定问题点后，返过来看，80080010和601E1400是传入这个野指针的数据，实际在log中也被打印出来了。</p><p>问题解决方法：</p><ol><li>使用柔性数组</li><li>调整p_ptr的计算方法</li></ol><h2 id="悬空指针和野指针" tabindex="-1"><a class="header-anchor" href="#悬空指针和野指针"><span>悬空指针和野指针</span></a></h2><p><strong>悬空指针</strong>是指向已经释放的内存空间的指针。 <strong>野指针</strong>是指向未知内存区域或者随意赋值的指针。</p><p>这次案例中，遇到的是野指针问题。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>对于踩内存类的问题，一个初步的排查方式：</p><ol><li><p>首先明确踩踏的内存的起始地址，可以通过逐步分析受害者的内存内容是否正常来一点点摸排找到被踩的起始地址。</p></li><li><p>抓住踩踏方的数据特征，在这个案例中，可以看到80080010和601E1400这两个特征数据。</p></li><li><p>这个问题总共分析了快一周时间，在使用指针时要小心谨慎，解决内存问题耗费的时间成本是代码编写时间的百倍。</p></li></ol>',52)],p={},o=(0,s(3671).A)(p,[["render",function(n,a){return(0,e.uX)(),(0,e.CE)("div",null,t)}]]),c=JSON.parse('{"path":"/protocol/dump_0001.html","title":"指针+1引发的DUMP问题","lang":"zh-CN","frontmatter":{"article":false,"title":"指针+1引发的DUMP问题","icon":"note","description":"背景 断断续续在分析一个死机问题，该问题很容易复现，但是每次复现后的死机现场都不太一样，从内存看，存在踩内存的情况。 问题发生在展锐的8910平台，该平台提供了一些内存问题检测功能。 Heap report: 在死机发生后，可以通过 Heap report 查看heap中的内存分配情况，包括内存的申请者，内存块的大小，以及检查内存是否存在被踩的情况等功...","head":[["meta",{"property":"og:url","content":"https://newzone.top/protocol/dump_0001.html"}],["meta",{"property":"og:site_name","content":"三月的油菜花"}],["meta",{"property":"og:title","content":"指针+1引发的DUMP问题"}],["meta",{"property":"og:description","content":"背景 断断续续在分析一个死机问题，该问题很容易复现，但是每次复现后的死机现场都不太一样，从内存看，存在踩内存的情况。 问题发生在展锐的8910平台，该平台提供了一些内存问题检测功能。 Heap report: 在死机发生后，可以通过 Heap report 查看heap中的内存分配情况，包括内存的申请者，内存块的大小，以及检查内存是否存在被踩的情况等功..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/tueo/cloudimg/main/img/20240613151517.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-13T09:14:03.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"指针+1引发的DUMP问题"}],["meta",{"property":"article:author","content":"LearnData"}],["meta",{"property":"article:modified_time","content":"2024-06-13T09:14:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"指针+1引发的DUMP问题\\",\\"description\\":\\"背景 断断续续在分析一个死机问题，该问题很容易复现，但是每次复现后的死机现场都不太一样，从内存看，存在踩内存的情况。 问题发生在展锐的8910平台，该平台提供了一些内存问题检测功能。 Heap report: 在死机发生后，可以通过 Heap report 查看heap中的内存分配情况，包括内存的申请者，内存块的大小，以及检查内存是否存在被踩的情况等功...\\"}"]]},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"进入现场","slug":"进入现场","link":"#进入现场","children":[]},{"level":2,"title":"0x80da8a68内存块分析","slug":"_0x80da8a68内存块分析","link":"#_0x80da8a68内存块分析","children":[]},{"level":2,"title":"0x80ea7ff8","slug":"_0x80ea7ff8","link":"#_0x80ea7ff8","children":[]},{"level":2,"title":"确定问题","slug":"确定问题","link":"#确定问题","children":[]},{"level":2,"title":"问题原因（指针+1问题）","slug":"问题原因-指针-1问题","link":"#问题原因-指针-1问题","children":[]},{"level":2,"title":"悬空指针和野指针","slug":"悬空指针和野指针","link":"#悬空指针和野指针","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1718270043000,"updatedTime":1718270043000,"contributors":[{"name":"quectel_lte","email":"Product_ruiwei@163.com","commits":1}]},"readingTime":{"minutes":6.87,"words":2062},"filePathRelative":"protocol/dump_0001.md","localizedDate":"2024年6月13日","excerpt":"<h2>背景</h2>\\n<p>断断续续在分析一个死机问题，该问题很容易复现，但是每次复现后的死机现场都不太一样，从内存看，存在踩内存的情况。\\n<img src=\\"https://raw.githubusercontent.com/tueo/cloudimg/main/img/20240613151517.png\\" alt=\\"\\" loading=\\"lazy\\"></p>\\n<p>问题发生在展锐的8910平台，该平台提供了一些内存问题检测功能。</p>\\n<p><code>Heap report</code>: 在死机发生后，可以通过 Heap report 查看heap中的内存分配情况，包括内存的申请者，内存块的大小，以及检查内存是否存在被踩的情况等功能。\\n<img src=\\"https://raw.githubusercontent.com/tueo/cloudimg/main/img/20240613150930.png\\" alt=\\"\\" loading=\\"lazy\\"></p>","autoDesc":true}')}}]);