<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://newzone.top/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://newzone.top/rss.xml" rel="self" type="application/rss+xml"/>
    <title>三月的油菜花</title>
    <link>https://newzone.top/</link>
    <description>无聊的生活，需要找一些有意义的事情去度过</description>
    <language>zh-CN</language>
    <pubDate>Mon, 26 Aug 2024 00:36:18 GMT</pubDate>
    <lastBuildDate>Mon, 26 Aug 2024 00:36:18 GMT</lastBuildDate>
    <generator>@vuepress/plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>使用指南</category>
    <category>工具</category>
    <item>
      <title>1. RT-Thread网络设备框架</title>
      <link>https://newzone.top/protocol/rtthread_netdev.html</link>
      <guid>https://newzone.top/protocol/rtthread_netdev.html</guid>
      <source url="https://newzone.top/rss.xml">1. RT-Thread网络设备框架</source>
      <description> 1. RT-Thread网络设备框架 1.1. netdev是如何获取到不同网络协议栈网卡信息的? 1.2. netdev和协议栈网卡的绑定关系? 1.3. netdev实例的创建 1.3.1. 共享资源保护 SAL层如何使用netdev? netdev示例状态变换通知 1. RT-Thread网络设备框架 在rtthread中, netdev致力于...</description>
      <pubDate>Mon, 26 Aug 2024 00:29:24 GMT</pubDate>
      <content:encoded><![CDATA[<ul>
<li><a href="#1-rt-thread%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E6%A1%86%E6%9E%B6">1. RT-Thread网络设备框架</a>
<ul>
<li><a href="#11-netdev%E6%98%AF%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%88%B0%E4%B8%8D%E5%90%8C%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%A0%88%E7%BD%91%E5%8D%A1%E4%BF%A1%E6%81%AF%E7%9A%84">1.1. netdev是如何获取到不同网络协议栈网卡信息的?</a></li>
<li><a href="#12-netdev%E5%92%8C%E5%8D%8F%E8%AE%AE%E6%A0%88%E7%BD%91%E5%8D%A1%E7%9A%84%E7%BB%91%E5%AE%9A%E5%85%B3%E7%B3%BB">1.2. netdev和协议栈网卡的绑定关系?</a></li>
<li><a href="#13-netdev%E5%AE%9E%E4%BE%8B%E7%9A%84%E5%88%9B%E5%BB%BA">1.3. netdev实例的创建</a>
<ul>
<li><a href="#131-%E5%85%B1%E4%BA%AB%E8%B5%84%E6%BA%90%E4%BF%9D%E6%8A%A4">1.3.1. 共享资源保护</a></li>
</ul>
</li>
<li><a href="#sal%E5%B1%82%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8netdev">SAL层如何使用netdev?</a></li>
<li><a href="#netdev%E7%A4%BA%E4%BE%8B%E7%8A%B6%E6%80%81%E5%8F%98%E6%8D%A2%E9%80%9A%E7%9F%A5">netdev示例状态变换通知</a></li>
</ul>
</li>
</ul>
<h1>1. RT-Thread网络设备框架</h1>
<figure><img src="https://raw.githubusercontent.com/tueo/cloudimg/main/img/20240806213013.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<p>在rtthread中, netdev致力于解决不同网络协议簇的网络设备的统一问题. 用于统一管理各个网卡的信息与网络连接信息.</p>
<p>从架构图上可以看到, netdev对上向SAL套接字抽象层提供服务, 对下, 抽象封装了Lwip, AT Socket等不同网络协议簇的网络设备信息.</p>
<h2>1.1. netdev是如何获取到不同网络协议栈网卡信息的?</h2>
<p>netdev在接口上提供了<code>low_level</code>系列接口用于不同网络协议簇的网卡信息获取. 这些接口由网络协议栈的驱动程序调用, 比如底层网卡的ip地址变更, 就通过<code>netdev_low_level_set_ipaddr</code>
修改netdev中保存的对应的网卡的ip地址.</p>
<div class="language-c" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/* Set network interface device status and address, this function can only be called in the network interface device driver */</span>
<span class="token keyword">void</span> <span class="token function">netdev_low_level_set_ipaddr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">netdev</span> <span class="token operator">*</span>netdev<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">ip_addr_t</span> <span class="token operator">*</span>ipaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">netdev_low_level_set_netmask</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">netdev</span> <span class="token operator">*</span>netdev<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">ip_addr_t</span> <span class="token operator">*</span>netmask<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">netdev_low_level_set_gw</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">netdev</span> <span class="token operator">*</span>netdev<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">ip_addr_t</span> <span class="token operator">*</span>gw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">netdev_low_level_set_dns_server</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">netdev</span> <span class="token operator">*</span>netdev<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> dns_num<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">ip_addr_t</span> <span class="token operator">*</span>dns_server<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">netdev_low_level_set_status</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">netdev</span> <span class="token operator">*</span>netdev<span class="token punctuation">,</span> <span class="token class-name">rt_bool_t</span> is_up<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">netdev_low_level_set_link_status</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">netdev</span> <span class="token operator">*</span>netdev<span class="token punctuation">,</span> <span class="token class-name">rt_bool_t</span> is_up<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">netdev_low_level_set_internet_status</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">netdev</span> <span class="token operator">*</span>netdev<span class="token punctuation">,</span> <span class="token class-name">rt_bool_t</span> is_up<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">netdev_low_level_set_dhcp_status</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">netdev</span> <span class="token operator">*</span>netdev<span class="token punctuation">,</span> <span class="token class-name">rt_bool_t</span> is_enable<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>如下是在LWIP协议栈中, netif_set_ipaddr中嵌入了netdev_low_level_set_ipaddr的调用, 用于在LWIP协议栈网卡的IP地址变更的时候, 同步修改netdev中的IP地址.</p>
<div class="language-c" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span>
<span class="token function">netif_set_ipaddr</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">netif</span> <span class="token operator">*</span>netif<span class="token punctuation">,</span> <span class="token class-name">ip_addr_t</span> <span class="token operator">*</span>ipaddr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token comment">//...</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">RT_USING_NETDEV</span></span>
  <span class="token comment">/* rt-thread sal network interface device set IP address operations */</span>
  <span class="token function">netdev_low_level_set_ipaddr</span><span class="token punctuation">(</span><span class="token function">netdev_get_by_name</span><span class="token punctuation">(</span>netif<span class="token operator">-&gt;</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">ip_addr_t</span> <span class="token operator">*</span><span class="token punctuation">)</span>ipaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* RT_USING_NETDEV */</span></span>
<span class="token punctuation">}</span>
</code></pre></div><h2>1.2. netdev和协议栈网卡的绑定关系?</h2>
<p>netdev和协议栈网卡的绑定关系是通过关联协议栈网卡<code>name</code>和netdev示例的<code>name</code>实现的. 如上面的示例中, netdev_get_by_name通过netif-&gt;name获取到LWIP协议栈网卡的netdev实例, 在rtthread中, 协议栈网卡中的<code>name</code>做了扩充, 增加到6个字节.</p>
<p>在netdev实例的创建接口(<code>netdev_register</code>)中, 也可以指定自定义数据, 通常可以将协议栈网卡的句柄传入, 这样也能实现从netdev示例反解出协议栈网卡的句柄.</p>
<h2>1.3. netdev实例的创建</h2>
<p>netdev的实例由使用方申请和释放, 可以通过<code>netdev_register</code>和<code>netdev_unregister</code>将netdev实例注册到netdev管理器中或者从netdev管理器中注销. netdev管理器中提供链表的方式串连这些netdev实例.</p>
<div class="language-c" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">netdev_register</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">netdev</span> <span class="token operator">*</span>netdev<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>user_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">netdev_unregister</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">netdev</span> <span class="token operator">*</span>netdev<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3>1.3.1. 共享资源保护</h3>
<p>netdev管理器中, 通过自选锁的方式对全局链表handle进行保护.</p>
<h2>SAL层如何使用netdev?</h2>
<ol>
<li>在SAL层的socket接口初始化时, 会首先尝试查找一个netdev def实例, 如果该实例不可用, 会回退尝试通过Address families匹配netdev实例. 如果匹配成功, 则将netdev实例和socket实例绑定, <strong>将netdev示例的句柄赋值给socket实例的netdev成员变量</strong>.</li>
<li>socket bind时, 会通过IP地址在netdev管理器中查询匹配指定IP地址的netdev实例, 如果匹配成功, 则更新socket实例的netdev成员变量.</li>
</ol>
<p>在SAL层的许多地方, 会直接通过socket实例的netdev成员变量访问netdev实例中保存的网络连接信息, 比如网卡是否可用等.</p>
<blockquote>
<p>多线程安全性问题: 在示例从netdev管理器中被注销后, 会将该netdev memset为0, SAL层在使用前都会检查netdev的UP标记, 以确定是否可以访问该netdev实例. 但是SAL层能否感知到netdev示例被协议栈底层释放呢? 在SAL层代码汇总并没有看到该痕迹. 或者说协议栈层网卡被销毁前有机制通知到SAL层, SAL层先删除自己的句柄, 这样就不存在多线程问题了.</p>
</blockquote>
<h2>netdev示例状态变换通知</h2>
<div class="language-c" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">netdev_set_register_callback</span><span class="token punctuation">(</span>netdev_callback_fn status_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">netdev_set_status_callback</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">netdev</span> <span class="token operator">*</span>netdev<span class="token punctuation">,</span> netdev_callback_fn status_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">netdev_set_addr_callback</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">netdev</span> <span class="token operator">*</span>netdev<span class="token punctuation">,</span> netdev_callback_fn addr_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/tueo/cloudimg/main/img/20240806213013.png" type="image/png"/>
    </item>
    <item>
      <title>初识</title>
      <link>https://newzone.top/protocol/linux/00_mt7866.html</link>
      <guid>https://newzone.top/protocol/linux/00_mt7866.html</guid>
      <source url="https://newzone.top/rss.xml">初识</source>
      <description>初识 从淘宝上找到一块 12 块钱的 linux 开发板，还带 WiFi 功能，拿回来玩一玩，计划学习 uboot，linux 设备树，适配 cat1.bis(合宙家) 的 usbnet 以及 PPP 拨号等功能。 拿到 开发板 后，记录开机 log 如下。 flash &amp; RAM 大小 flash 分区 上面的分区中缺少从 0x50000 到 0x1...</description>
      <pubDate>Sun, 25 Aug 2024 13:39:11 GMT</pubDate>
      <content:encoded><![CDATA[
<p>从淘宝上找到一块 12 块钱的 linux 开发板，还带 WiFi 功能，拿回来玩一玩，计划学习 uboot，linux 设备树，适配 cat1.bis(合宙家) 的 usbnet 以及 PPP 拨号等功能。</p>
<p>拿到 <code>开发板</code> 后，记录开机 log 如下。</p>
<h2>flash &amp; RAM 大小</h2>
<p>| 存储  | size  | 型号      |
|</p>
]]></content:encoded>
    </item>
    <item>
      <title></title>
      <link>https://newzone.top/protocol/git.html</link>
      <guid>https://newzone.top/protocol/git.html</guid>
      <source url="https://newzone.top/rss.xml"></source>
      <description>文件权限变化导致的git差异 最近有一个项目中，经常出现特定两个文件显示存在git差异，但是使用BCompare比较，其二进制完全相同。使用 git diff 查看，提示如下： 从git信息看，存在文件权限变化，导致git认为文件内容有变化。 知道差异原因就好处理了，可以使用如下命令让git忽略文件权限差异。 gerrit提交代码 提交代码到my_br...</description>
      <pubDate>Thu, 13 Jun 2024 09:14:03 GMT</pubDate>
      <content:encoded><![CDATA[<h2>文件权限变化导致的git差异</h2>
<p>最近有一个项目中，经常出现特定两个文件显示存在git差异，但是使用BCompare比较，其二进制完全相同。使用 <code>git diff</code> 查看，提示如下：
<img src="https://raw.githubusercontent.com/tueo/cloudimg/main/img/20240509155417.png" alt="" loading="lazy"></p>
<p>从git信息看，存在文件权限变化，导致git认为文件内容有变化。</p>
<p>知道差异原因就好处理了，可以使用如下命令让git忽略文件权限差异。</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> core.fileMode <span class="token boolean">false</span>
</code></pre></div><h2>gerrit提交代码</h2>
<p>提交代码到<code>my_branch</code>，需要审核</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin HEAD:refs/for/my_branch
</code></pre></div><p>提交代码到<code>my_branch</code>，不需要代码审核</p>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin HEAD:refs/heads/my_branch
<span class="token function">git</span> push origin HEAD:refs/for/my_branch%no-review
</code></pre></div><h2>查看历史commit的文件信息</h2>
<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> whatchanged
</code></pre></div><h2>忽略本地修改，但是不适用.gitignore</h2>
<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>git update-index --skip-worktree /path/to/file
</code></pre></div><p>这种方式适用于文件已经存在于仓库，但是本地修改不想提交到仓库。如果是新增的文件，可以在<code>.git/info/exclude</code>中添加希望忽略的文件。</p>
]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/tueo/cloudimg/main/img/20240509155417.png" type="image/png"/>
    </item>
    <item>
      <title>kconfig文件</title>
      <link>https://newzone.top/protocol/kconfig.html</link>
      <guid>https://newzone.top/protocol/kconfig.html</guid>
      <source url="https://newzone.top/rss.xml">kconfig文件</source>
      <description>kconfig文件 在调整项目编译结构时，需要使用python的 kconfiglib库来解析kconfig文件，但是调整的一个kconfig文件一直无法被感知到。 一开始怀疑是该kconfig文件没有使用menu的原因，但是从kconfig文档看，应该不存在该问题。 最终定位到是source语法的使用问题。 在项目中， top level的kconf...</description>
      <pubDate>Thu, 13 Jun 2024 09:14:03 GMT</pubDate>
      <content:encoded><![CDATA[
<p>在调整项目编译结构时，需要使用python的 kconfiglib库来解析kconfig文件，但是调整的一个kconfig文件一直无法被感知到。</p>
<p>一开始怀疑是该kconfig文件没有使用menu的原因，但是从kconfig文档看，应该不存在该问题。</p>
<p>最终定位到是<code>source</code>语法的使用问题。</p>
<p>在项目中， top level的kconfig文件使用<code>orsource</code>包含了中间层的A kconfig文件（为项目调整编写的新的kconfig文件）。 A kconfig文件使用<code>osource</code>包含目标B kconfig文件。</p>
<p>测试发现一直无法生成B kconfig文件对应的cmake变量。最后才看到漏掉了<code>orsource</code>的<code>r</code>。</p>
<p><img src="https://raw.githubusercontent.com/tueo/cloudimg/main/img/20240522202629.png" alt="" loading="lazy">
其间也怀疑过osource使用存在问题，使用gpt查询<code>osource</code>和<code>orsource</code>的差异，结果被gpt的错误答案误导了😭</p>
<p>在kconfiglib中有如下描述：</p>
<p><code>source</code> 用来引入其他的kconfig文件。
<code>osource</code> 表示optional source，表示可选的，如果osource指定的kconfig文件不存在，编译不会报错，将继续下去。
<code>rsource</code> 表示relative source，后面应用的kconfig文件支持相对路径，路径相对于包含rsource语句的kconfig而言。
<code>orsource</code> 则是<code>osource</code>和<code>rsource</code>的接合。</p>
<p>osurce rsource orsource等其实是kconfiglib提供的kconfig的扩展。</p>
]]></content:encoded>
      <enclosure url="https://raw.githubusercontent.com/tueo/cloudimg/main/img/20240522202629.png" type="image/png"/>
    </item>
    <item>
      <title></title>
      <link>https://newzone.top/protocol/ZigBee/tcpip.html</link>
      <guid>https://newzone.top/protocol/ZigBee/tcpip.html</guid>
      <source url="https://newzone.top/rss.xml"></source>
      <description>编程中常用的IP地址数据接口与接口 数据结构： struct in_addr 和 ip4_addr_t等价 线程安全型接口： inet_pton 转换字符串到网络字节序地址 inet_ntop 将网络字节序地址转换为字符串 线程不安全接口： inet_addr 将点分十进制IP地址（字符串）转换成网络字节序IP地址【返回网络字节序的地址】 inet_a...</description>
      <pubDate>Thu, 13 Jun 2024 09:14:03 GMT</pubDate>
      <content:encoded><![CDATA[<h2>编程中常用的IP地址数据接口与接口</h2>
<p>数据结构：
<code>struct in_addr</code> 和 <code>ip4_addr_t</code>等价</p>
<p>线程安全型接口：</p>
<ul>
<li><strong>inet_pton</strong> 转换字符串到网络字节序地址</li>
<li><strong>inet_ntop</strong> 将网络字节序地址转换为字符串</li>
</ul>
<p>线程不安全接口：
<strong>inet_addr</strong> 将点分十进制IP地址（字符串）转换成网络字节序IP地址【返回网络字节序的地址】
<strong>inet_aton</strong> 同上【返回网络字节序的地址】
<strong>inet_ntoa</strong> 将网络字节序IP转化点分十进制IP（字符串）</p>
<h2>inet接口和ip4_addr以及ip6_addr接口的区别</h2>
<p>ip地址数据接口差异：</p>
<p>inet接口定义：</p>
<div class="language-c" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span><span class="token class-name">in_addr_t</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">defined</span><span class="token punctuation">(</span>IN_ADDR_T_DEFINED<span class="token punctuation">)</span></span></span>
<span class="token keyword">typedef</span> <span class="token class-name">u32_t</span> <span class="token class-name">in_addr_t</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">struct</span> <span class="token class-name">in_addr</span> <span class="token punctuation">{</span>
  <span class="token class-name">in_addr_t</span> s_addr<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">in6_addr</span> <span class="token punctuation">{</span>
  <span class="token keyword">union</span> <span class="token punctuation">{</span>
    <span class="token class-name">u32_t</span> u32_addr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">u8_t</span>  u8_addr<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> un<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">s6_addr</span>  <span class="token expression">un<span class="token punctuation">.</span>u8_addr</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>ip4_addr.h</p>
<div class="language-c" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/** This is the aligned version of ip4_addr_t,
   used as local variable, on the stack, etc. */</span>
<span class="token keyword">struct</span> <span class="token class-name">ip4_addr</span> <span class="token punctuation">{</span>
  <span class="token class-name">u32_t</span> addr<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/** ip4_addr_t uses a struct for convenience only, so that the same defines can
 * operate both on ip4_addr_t as well as on ip4_addr_p_t. */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ip4_addr</span> <span class="token class-name">ip4_addr_t</span><span class="token punctuation">;</span>
</code></pre></div><p>ip6_addr.h</p>
<div class="language-c" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token comment">/** This is the aligned version of ip6_addr_t,
    used as local variable, on the stack, etc. */</span>
<span class="token keyword">struct</span> <span class="token class-name">ip6_addr</span> <span class="token punctuation">{</span>
  <span class="token class-name">u32_t</span> addr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">LWIP_IPV6_SCOPES</span></span>
  <span class="token class-name">u8_t</span> zone<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">/* LWIP_IPV6_SCOPES */</span></span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">/** IPv6 address */</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ip6_addr</span> <span class="token class-name">ip6_addr_t</span><span class="token punctuation">;</span>
</code></pre></div>]]></content:encoded>
    </item>
    <item>
      <title>博客文章样例</title>
      <link>https://newzone.top/posts/2024-03-01-blog_example.html</link>
      <guid>https://newzone.top/posts/2024-03-01-blog_example.html</guid>
      <source url="https://newzone.top/rss.xml">博客文章样例</source>
      <description>博客文章内容，支持 Markdown 和 HTML 语言。 </description>
      <category>使用指南</category>
      <pubDate>Fri, 01 Mar 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>博客文章内容，支持 Markdown 和 HTML 语言。</p>
]]></content:encoded>
    </item>
    <item>
      <title>博客文章样例2</title>
      <link>https://newzone.top/posts/2024-03-02-blog_example2.html</link>
      <guid>https://newzone.top/posts/2024-03-02-blog_example2.html</guid>
      <source url="https://newzone.top/rss.xml">博客文章样例2</source>
      <description>博客文章内容，支持 Markdown 和 HTML 语言。 </description>
      <category>工具</category>
      <pubDate>Sat, 02 Mar 2024 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>博客文章内容，支持 Markdown 和 HTML 语言。</p>
]]></content:encoded>
    </item>
  </channel>
</rss>